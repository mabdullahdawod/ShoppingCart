@page "/"
@using ShoppingCart.Modal
@using ShoppingCart.SharedService
@using ShoppingCart.Services
@using ShoppingCartShared.DTO
@rendermode InteractiveServer
@inject ProductShareService sharedservice
@inject ProductServices productservice
@inject NavigationManager navigate
@inject HttpClient http

<button class="btn btn-info m-3" @onclick="() => OpenAddProductDB()">OpenAddProductDB</button>

<Navbar/>

@* <div class="text-center fs-1">Products</div> *@

@if (isLoading)
{
    <div class="text-center">Loading...</div>
}
else if (products == null || !products.Any())
{
    <div class="text-center">No products available</div>
}
else
{
    <div class="container-fluid" style="display: flex; flex-wrap: wrap; flex-direction: row; ">
        @foreach (var item in products)
        {
            <ProductCard product="@item" />
        }
    </div>
}

@code {
    private List<ProductDTO> products;
    private bool isLoading = true;
    private string errorMessage;

    protected async override Task OnInitializedAsync()
    {
        // try
        // {
        //     products = await productservice.GetProductsAsync();
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Error fetching products: {ex.Message}");
        // }
        // finally
        // {
        //     isLoading = false;
        // }


        try
        {

            products = await http.GetFromJsonAsync<List<ProductDTO>>("https://localhost:7153/Product");

        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching products: {ex.Message}";
        }

        finally
        {
            isLoading = false;
        }
    }
    
        public void OpenAddProductDB()
        {
            navigate.NavigateTo("/AdProductDB");
        }




 
}
