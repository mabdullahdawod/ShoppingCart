@page "/AddedProduct"
@using ShoppingCart.Modal
@rendermode InteractiveServer
@using ShoppingCart.SharedService
@inject ProductShareService sharedservice
@inject NavigationManager navigate
@inject IJSRuntime JSRuntime
@using ShoppingCartShared.DTO
<Navbar />

<style>
    .quantity-controls {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }

    .quantity-button {
        padding: 10px;
        border: 1px solid #ddd;
        cursor: pointer;
        font-size: 18px;
        user-select: none;
    }

    .quantity-display {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: center;
        width: 50px;
    }
</style>

<h3 class="fw-bold">Your Cart</h3>
<div>Total Price: <span style="color:red; font-weight:bold; font-size:32px;">PKR @TotalPrice</span></div>

<div>
    <div class="row">
        <div class="col-lg-6 col-md-12">
            @if (Products!=null && Products.Any())
            {
                @foreach (var product in Products)
                {
                    
                    <div class="card mb-3" style="max-width: 640px;">
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img src="@product.ProductImgUrl" class="img-fluid rounded-start" style="cursor:pointer; width:225px; height: -webkit-fill-available;" alt="..." @onclick="() => ProductDetail(product.ProductId)">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body" style="position:relative;">
                                    <div type="button" class="btn-close" aria-label="Close" style="position:absolute; right:0; top:0; background-color:red; border-radius:1px;" @onclick="() => RemoveAllProducts(product)"></div>
                                    <h5 class="card-title">@product.Title</h5>
                                    <p class="card-text">@product.ProductDescription</p>
                                    <p class="card-text"><small class="text-body-secondary">Price: PKR @product.ProductPrice</small></p>
                                    <p class="card-text"><small class="text-body-secondary">Sub Total: PKR @GetSubtotal(product)</small></p>
                                    <div class="quantity buttons_added">
                                        <input type="button" class="minus" value="-" @onclick="() => ChangeQuantity(product, -1)">
                                        <input id="quantity-@product.ProductId" type="number" size="4" class="input-text qty text" value="@GetQty(product)" title="Qty" min="0" step="1" @onchange="(e) => UpdateQuantity(product, e)">
                                        <input type="button" class="plus" value="+" @onclick="() => ChangeQuantity(product, 1)">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    Please add a product.
                </div>
            }
        </div>
        <div class="col-lg-6 col-md-12">
            <!-- Potentially more UI here -->
        </div>
    </div>
</div>

@code {
    private List<ProductDTO> Products;
    public double TotalPrice { get; set; }

    protected override void OnInitialized()
    {
        CalculateTotalPriceForGroupedProducts();
    }

    private void RemoveAllProducts(ProductDTO Product)
    {
        sharedservice.ClearCart(Product);
        CalculateTotalPriceForGroupedProducts();
        StateHasChanged();
    }

    public void ProductDetail(int id)
    {
        navigate.NavigateTo($"/ProductDetailpage/{id}");
    }

    private void CalculateTotalPriceForGroupedProducts()
    {
        
        var products = sharedservice.ShoppingCart.ToList(); // Your original list

        var seenIds = new HashSet<int>();
        var distinctProducts = new List<ProductDTO>();

        foreach (var product in products)
        {
            if (seenIds.Add(product.ProductId)) // Add returns false if the item already exists
            {
                distinctProducts.Add(product);
            }
        }
        Products = distinctProducts;
        TotalPrice = sharedservice.ShoppingCart.Sum(s => s.ProductPrice);
    }

    private double GetSubtotal(ProductDTO product)
    {
        var quantity = sharedservice.ShoppingCart
            .Where(s => s.ProductId == product.ProductId)
            .Count();
        return product.ProductPrice * quantity;
    }

    public int GetQty(ProductDTO product) => sharedservice.ShoppingCart.Where(s => s.ProductId == product.ProductId).Count();
    private void ChangeQuantity(ProductDTO product, int change)
    {
        if (change > 0)
        {
            sharedservice.AddProduct(product);
        }
        else if (change < 0)
        {
            sharedservice.RemoveProduct(product);
        }

        CalculateTotalPriceForGroupedProducts();
        StateHasChanged();
    }

    private void UpdateQuantity(ProductDTO product, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var newQuantity))
        {
            var currentQuantity = sharedservice.ShoppingCart
                .Where(s => s.ProductId == product.ProductId)
                .Count();

            // Adjust the quantity in the cart
            if (newQuantity > currentQuantity)
            {
                for (var i = 0; i < newQuantity - currentQuantity; i++)
                {
                    sharedservice.AddProduct(product);
                }
            }
            else if (newQuantity < currentQuantity)
            {
                for (var i = 0; i < currentQuantity - newQuantity; i++)
                {
                    sharedservice.RemoveProduct(product);
                }
            }
            CalculateTotalPriceForGroupedProducts();
        }

        StateHasChanged();
    }
}
